import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from states import Work
from weather import How_weather
from aiogram.fsm.context import FSMContext
from generators import generate
from database import Work_AI_dict, ContexManager, Work_weather
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from geopy.distance import geodesic
from aiogram import F
from aiogram.types import Message
import requests
from io import BytesIO
from aiogram.types import InputFile
import os
from PIL import Image, ImageDraw, ImageFont
from typing import Optional

dp = Dispatcher()
bot = Bot(token="7699700109:AAHk-ntwf8EuhRA5eDXaJXyqGq9F-v0OZHo")

dict_Work_AI = Work_AI_dict()
contant = ContexManager()
weather_work = Work_weather()

markup = ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚ú®")],
        [types.KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚ùå")],
        [types.KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚ùÑ")],
        [types.KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üñº –°–æ–∑–¥–∞—Ç—å –º–µ–º")],
        [types.KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")],
        [types.KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ–¥–ø—É–Ω–∫—Ç—ã", request_location=True)]
    ],
    resize_keyboard=True
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Yandex Maps
YANDEX_STATIC_MAPS_URL = "https://static-maps.yandex.ru/v1"
YANDEX_MAPS_API_KEY = "f3a0fe3a-b07e-4840-a1da-06f18b2ddf13"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs("user_images", exist_ok=True)
os.makedirs("memes", exist_ok=True)
os.makedirs("user_documents", exist_ok=True)


@dp.message(CommandStart())
async def cmd_start(message: Message):
    try:
        dict_Work_AI.add_message(message.chat.id, False)
        contant.clear(message.chat.id)
        weather_work.add_message(message.chat.id, False)
        await bot.send_message(
            message.chat.id,
            text="–ü—Ä–∏–≤–µ—Ç! ‚ù§ –Ø –±—É–¥—É –≤–∞—à–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç! üôå",
            reply_markup=markup
        )
    except KeyboardInterrupt:
        print("–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")


async def generate_static_map(lat: float, lon: float, medical_points: list):
    markers = [f"color:red~{lat},{lon}"]  # –ú–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for point in medical_points:
        markers.append(f"color:blue~{point['lat']},{point['lon']}")

    params = {
        "apikey": YANDEX_MAPS_API_KEY,
        "ll": f"{lon},{lat}",
        "spn": "0.05,0.05",
        "l": "map",
        "pt": "~".join(markers),
        "size": "650,450"
    }

    try:
        response = requests.get(YANDEX_STATIC_MAPS_URL, params=params)
        if response.status_code == 200:
            return BytesIO(response.content)
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {e}")
        return None


async def get_nearest_medical(latitude: float, longitude: float, radius_km: int = 200):
    url = "https://search-maps.yandex.ru/v1/"
    params = {
        "apikey": YANDEX_MAPS_API_KEY,
        "text": "–±–æ–ª—å–Ω–∏—Ü–∞, –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞, –º–µ–¥–ø—É–Ω–∫—Ç",
        "lang": "ru_RU",
        "ll": f"{longitude},{latitude}",
        "spn": f"{radius_km / 300},{radius_km / 300}",
        "type": "biz",
        "results": 5
    }

    try:
        response = requests.get(url, params=params).json()
        medical_points = []

        for item in response.get("features", []):
            name = item["properties"]["name"]
            address = item["properties"]["description"]
            point_lon, point_lat = item["geometry"]["coordinates"]
            distance = geodesic((latitude, longitude), (point_lat, point_lon)).km

            medical_points.append({
                "name": name,
                "address": address,
                "distance": round(distance, 2),
                "lat": point_lat,
                "lon": point_lon
            })

        return sorted(medical_points, key=lambda x: x["distance"])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex.Maps: {e}")
        return []


def generate_yandex_map_link(lat: float, lon: float, points: list):
    markers = [f"{lat},{lon},pm2rdl"]
    for point in points:
        markers.append(f"{point['lat']},{point['lon']},pm2bll")

    link = (
        f"https://yandex.ru/maps/?mode=search&text={lat}%2C{lon}"
        f"&pt={'~'.join(markers)}"
    )
    return link


@dp.message(F.location)
async def handle_location(message: Message):
    lat = message.location.latitude
    lon = message.location.longitude

    medical_points = await get_nearest_medical(lat, lon)
    if not medical_points:
        await message.answer("üö® –†—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ–¥–ø—É–Ω–∫—Ç–æ–≤.")
        return

    response_text = ["üìç –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ–¥–ø—É–Ω–∫—Ç—ã:"]
    for idx, point in enumerate(medical_points, 1):
        response_text.append(
            f"\n{idx}. **{point['name']}**\n"
            f"   üè• –ê–¥—Ä–µ—Å: {point['address']}\n"
            f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {point['distance']} –∫–º"
        )

    map_link = generate_yandex_map_link(lat, lon, medical_points)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", url=map_link)]
        ]
    )

    map_image = await generate_static_map(lat, lon, medical_points)
    if map_image:
        await message.answer_photo(
            InputFile(map_image, filename="map.jpg"),
            caption="\n".join(response_text),
            reply_markup=keyboard
        )
    else:
        await message.answer("\n".join(response_text), reply_markup=keyboard)


@dp.message(Command("go"))
async def cmd_go(message: Message):
    await message.answer('–ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞')
    dict_Work_AI.add_message(message.chat.id, True)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("""/go - –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/start - –∑–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞
–ú–ï–ù–Æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞:
1. –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
2. –°–∫–∏–¥—ã–≤–∞–µ—Ç–µ —Ñ–æ—Ç–æ
3. –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–µ–º
4. –í–≤–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ
–ú–ï–ù–Æ –¥–ª—è –º–µ–¥–ø—É–Ω–∫—Ç–æ–≤:
–†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç""")


@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    await message.answer('–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞')
    dict_Work_AI.add_message(message.chat.id, False)
    contant.clear(message.chat.id)


@dp.message(Command("weather"))
async def cmd_weather(message: Message):
    weather_work.add_message(message.chat.id, True)
    dict_Work_AI.add_message(message.chat.id, False)
    await message.answer(How_weather())


async def get_last_user_photo(user_id: int) -> Optional[str]:
    try:
        import glob
        user_files = glob.glob(f"user_images/{user_id}_*.jpg")
        if not user_files:
            return None
        user_files.sort(key=os.path.getmtime, reverse=True)
        return user_files[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–æ—Ç–æ: {e}")
        return None


async def create_meme(image_path: str, text: str) -> str:
    try:
        with Image.open(image_path) as img:
            draw = ImageDraw.Draw(img)

            try:
                font = ImageFont.truetype("arial.ttf", size=40)
            except:
                font = ImageFont.load_default(size=40)

            text_width = draw.textlength(text, font=font)
            x = (img.width - text_width) / 2
            y = 10

            draw.text(
                (x, y),
                text,
                fill="white",
                font=font,
                stroke_width=2,
                stroke_fill="black"
            )

            meme_path = f"memes/{os.path.basename(image_path)}"
            img.save(meme_path)
            return meme_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None


@dp.message(F.text.startswith("–ú–µ–º:"))
async def make_meme(message: Message):
    last_photo = await get_last_user_photo(message.from_user.id)
    if not last_photo:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ!")
        return

    meme_text = message.text.split("–ú–µ–º:")[1].strip()
    if not meme_text:
        await message.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ '–ú–µ–º:'")
        return

    meme_path = await create_meme(last_photo, meme_text)
    if meme_path:
        with open(meme_path, 'rb') as photo:
            await message.answer_photo(
                photo,
                caption="–í–∞—à –º–µ–º –≥–æ—Ç–æ–≤! üéâ"
            )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–º")


@dp.message(F.text == "üñº –°–æ–∑–¥–∞—Ç—å –º–µ–º")
async def ask_for_meme_text(message: Message, state: FSMContext):
    last_photo = await get_last_user_photo(message.from_user.id)
    if not last_photo:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'")
        return

    await state.update_data(photo_path=last_photo)
    await message.answer(
        "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ '–ú–µ–º:')",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Work.waiting_for_meme_text)


@dp.message(Work.waiting_for_meme_text, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞")
async def cancel_meme_creation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)


@dp.message(Work.waiting_for_meme_text)
async def process_meme_text(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if message.text in ["–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚ú®", "–í—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚ùå", "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚ùÑ", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"]:
        await state.clear()
        await ai(message)
        return

    user_data = await state.get_data()
    photo_path = user_data.get('photo_path')

    if not photo_path or not os.path.exists(photo_path):
        await message.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    meme_text = message.text.replace("–ú–µ–º:", "").strip()
    if not meme_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–º
        meme_path = await create_meme(photo_path, meme_text)
        if not meme_path or not os.path.exists(meme_path):
            raise FileNotFoundError("–ú–µ–º –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        with open(meme_path, 'rb') as photo_file:
            # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            photo_bytes = BytesIO(photo_file.read())
            photo_bytes.seek(0)  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

            await message.answer_photo(
                types.BufferedInputFile(photo_bytes.read(), filename="meme.jpg"),
                caption="–í–∞—à –º–µ–º –≥–æ—Ç–æ–≤! üéâ",
                reply_markup=markup
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–º–∞: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=markup
        )
    finally:
        await state.clear()


@dp.message(F.photo)
async def handle_photo(message: Message):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    original_path = f"user_images/{message.from_user.id}_{file_id}.jpg"
    await bot.download_file(file_path, original_path)

    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üñº –°–æ–∑–¥–∞—Ç—å –º–µ–º'")


@dp.message(F.document & (F.document.mime_type.startswith('image/')))
async def handle_image_doc(message: Message):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    save_path = f"user_images/{message.from_user.id}_{file_id}.jpg"
    await bot.download_file(file_path, save_path)

    await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üñº –°–æ–∑–¥–∞—Ç—å –º–µ–º'")


@dp.message()
async def ai(message: Message):
    if message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚ùÑ':
        await message.answer(How_weather())
    elif message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚ú®':
        await message.answer('–ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞')
        dict_Work_AI.add_message(message.chat.id, True)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å ‚ùå':
        await message.answer('–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞')
        contant.clear(message.chat.id)
        dict_Work_AI.add_message(message.chat.id, False)
    elif message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
        await message.answer("""/go - –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥–∞""")
    elif dict_Work_AI.Work_Ai_message(message.chat.id):
        contant.add_message(message.chat.id, message.text)
        res = await generate(contant.contex_message(message.chat.id))
        await message.answer(res.choices[0].message.content)
    elif weather_work.Work_weather_message(message.chat.id):
        weather_work.add_message(message.chat.id, False)
        await message.answer(How_weather())


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass